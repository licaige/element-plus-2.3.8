/* Element CSS 全局的 SCSS 自定义函数 */
@use 'config';
// BEM support Func
//该函数将选择器转化为字符串，并截取指定位置的字符
@function selectorToString($selector) {
  // inspect(...) 表达式中的内容如果是正常会返回对应的内容，如果发生错误则会弹出一个错误提示。
  $selector: inspect($selector);
  // inspect($value) 将列表转换成字符串
  //str-slice 截取指定字符,比如el-div-svg，之后为l-div-sv，同js不一致
  $selector: str-slice($selector, 2, -2);
  // str-slice($string, $start-at, $end-at) 截取字符串
  @return $selector;
}
// 判断父级选择器是否包含'--'
// 选择器是否包含修饰符
@function containsModifier($selector) {
  $selector: selectorToString($selector);
  // 检查 选择器中 是否存在修饰器分隔符
  @if str-index($selector, config.$modifier-separator) {
    //str-index 返回字符串的第一个索引
    @return true;
  } @else {
    @return false;
  }
}
// 判断父级选择器是否包含'.is-'
@function containWhenFlag($selector) {
  $selector: selectorToString($selector);
  //先搞字符串，然后查找
  // 是否包含状态前缀
  @if str-index($selector, '.' + config.$state-prefix) {
    @return true;
  } @else {
    @return false;
  }
}
// 判断父级是否包含 ':' （用于判断伪类和伪元素）
@function containPseudoClass($selector) {
  $selector: selectorToString($selector);
  // 是否包含伪类
  @if str-index($selector, ':') {
    @return true;
  } @else {
    @return false;
  }
}
// 判断父级选择器，是否包含`--` `.is-`  `：`这三种字符
// 判断是否存在特殊嵌套 包含修饰器，包含状态 包含伪类
@function hitAllSpecialNestRule($selector) {
  @return containsModifier($selector) or containWhenFlag($selector) or
    containPseudoClass($selector);
}
// join var name
// joinVarName(('button', 'text-color')) => '--el-button-text-color'
//这个理解为字符串拼接就行，加了前缀
// 当列表中的元素不为 '' 的时候将其使用 - 连接,通过 joinVarName 函数根据参数 $list 拼接 CSS 变量名,参数 $list 是一个数组
@function joinVarName($list) {
  $name: '--' + config.$namespace;
  @each $item in $list {
    //剔除了为空的传值
    @if $item != '' {
      $name: $name + '-' + $item;
    }
  }
  @return $name;
}
// getCssVarName('button', 'text-color') => '--el-button-text-color'
//形参为数组的形式，同js不一致的，在于...在后面
// getCssVarName('bg-color', '') => '--el-bg-color'
@function getCssVarName($args...) {
  @return joinVarName($args);
}
// getCssVar('button', 'text-color') => var(--el-button-text-color)
//传进来的参数进行拼接成 CSS 变量的名称
@function getCssVar($args...) {
  @return var(#{joinVarName($args)});
}

// getCssVarWithDefault(('button', 'text-color'), red) => var(--el-button-text-color, red)
@function getCssVarWithDefault($args, $default) {
  @return var(#{joinVarName($args)}, #{$default});
}
// bem('block', 'element', 'modifier') => 'el-block__element--modifier'
@function bem($block, $element: '', $modifier: '') {
  $name: config.$namespace + config.$common-separator + $block;
  @if $element != '' {
    $name: $name + config.$element-separator + $element;
  }
  @if $modifier != '' {
    $name: $name + config.$modifier-separator + $modifier;
  }
  // @debug $name;
  @return $name;
}
